/**
 * Phzc.com Inc.
 * Copyright (c) 2015-2015 All Rights Reserved.
 */
package com.phzc.business.analysis.web.utils;

import java.io.UnsupportedEncodingException;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.log4j.Logger;

/**
 * 
 * @author WANGKUN514
 * @version $Id: DesUtils.java, v 0.1 2015年7月23日 下午2:03:45 WANGKUN514 Exp $
 */
public class DesUtils {
    
    private static final Logger logger  = Logger.getLogger(DesUtils.class);
    private static final String Algorithm = "DESede"; // 定义 加密算法,可用 DES,DESede,Blowfish
    private static final String hexString="0123456789ABCDEF";

    /**
     * 3DES加密
     * @param keyByte
     * @param src
     * @return
     */
    public static byte[] encryptMode(byte[] keyByte, byte[] src) {
        try {
            
            SecretKey deskey = new SecretKeySpec(keyByte, Algorithm);
            Cipher cipher = Cipher.getInstance(Algorithm);
            cipher.init(Cipher.ENCRYPT_MODE, deskey);
            return cipher.doFinal(src);
        } catch (java.security.NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (javax.crypto.NoSuchPaddingException e2) {
            e2.printStackTrace();
        } catch (java.lang.Exception e3) {
            e3.printStackTrace();
        }
        return null;
    }
 
    /**
     * 3DES解密
     * @param keybyte 密钥
     * @param src     需要解密的数据
     * @return
     */
    public static byte[] decryptMode(byte[] keyByte, byte[] src) {
        try {

            SecretKey deskey = new SecretKeySpec(keyByte, Algorithm);
            Cipher cipher = Cipher.getInstance(Algorithm);
            cipher.init(Cipher.DECRYPT_MODE, deskey);
            return cipher.doFinal(src);
        } catch (java.security.NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (javax.crypto.NoSuchPaddingException e2) {
            e2.printStackTrace();
        } catch (java.lang.Exception e3) {
            e3.printStackTrace();
        }
        return null;
    }
    
    /**
     * 字符串转16进制byte
     * @param src
     * @return
     */
    public static byte[] string2Hex(String src) {
        int length = (src.length() + 1 ) / 2 ;
        byte [] dst = new byte [length];
        int i;
        byte cTemp;

        for ( i = 0; i < src.length(); i++ ) {
            if( src.charAt(i) < 'A' )
                cTemp = (byte) (src.charAt(i) - '0');
            else if( src.charAt(i) < 'a' )
                cTemp = (byte) (src.charAt(i) - 'A' + 10);
            else
                cTemp = (byte) (src.charAt(i) - 'a' + 10);

            if( i % 2 == 1 )
                dst[i/2] |= cTemp;
            else
                dst[i/2] = (byte) (cTemp << 4);
        }
        return dst;
    }
    
    /**
     * byte转16进制字符串
     * @param b
     * @return
     */
    public static String byte2hex(byte[] b) {
        String hs = "";
        String stmp = "";
        for (int n = 0; n < b.length; n++) {
            stmp = (java.lang.Integer.toHexString(b[n] & 0XFF));
            if (stmp.length() == 1){
                hs = hs + "0" + stmp;
            }else {
                hs = hs + stmp;
            }
        }
        return hs.toUpperCase();
    }
    
    /**
     * 字符串3DES加密
     * @param desKey
     * @param src
     * @return
     * @throws UnsupportedEncodingException 
     */
    public static String encDesStr(String desKey, String src){
        
        if(null == src)
            return "";
        try {
            byte[] keyBytes = desKey.getBytes();
            byte[] encoded;
		
			encoded = encryptMode(keyBytes, src.getBytes("UTF-8"));
			String encodeStr = byte2hex(encoded);
			return encodeStr;
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
        
        return "";
        
    }
    
    /**
     * 字符串3DES解密
     * @param desKey
     * @param encSrc
     * @return
     */
    public static String decDesStr(String desKey, String encSrc){
    	if(null == encSrc)
            return "";
    	
        
        byte[] keyBytes = desKey.getBytes();
        byte[] decodeBytes = string2Hex(encSrc);
        byte[] srcBytes = decryptMode(keyBytes, decodeBytes);
        String tmp = "";
        try {
            tmp = new String(srcBytes, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            logger.error("", e);
        }
        
        return tmp;
    }
}
